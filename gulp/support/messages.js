import sortObject from 'sort-object';

// @flow
// We store messages as code instead of as JSON because JSON sucks.
// - We can use comments, they are useful for translations.
// - Multiline strings ftw.
// - Translations are eslinted.
const descriptorsToMessages = descriptors =>
  descriptors.reduce(
    (previous, { defaultMessage, id }) => ({
      ...previous,
      [id]: defaultMessage,
    }),
    {},
  );

export const messagesToCode = (descriptors: Array<Object>) => {
  const messages = sortObject(descriptorsToMessages(descriptors), {
    sort: (a, b) => a.localeCompare(b),
  });

  const messagesString = JSON.stringify(messages, null, 2)
    // Indent messages.
    .replace(/:\s/g, ':\n    ')
    // Separate messages with blank line
    .replace(/",\n/g, '",\n\n');

  return `/* eslint-disable max-len, quote-props, quotes, comma-dangle */
export default ${messagesString};
`;
};

export const diff = (a: Array<Object>, b: Array<Object>) =>
  a.filter(item => b.indexOf(item) === -1);

const genLocaleBlock = locale => `
  // $FlowFixMe
  ${locale}: (callback) => require.ensure([
    'react-intl/locale-data/${locale}',
    '../../messages/${locale}.js',
  ], (require) =>
    addLocale(
      require('react-intl/locale-data/${locale}'),
      require('../../messages/${locale}.js').default,
    callback), '${locale}'),

  ${locale}_polyfill: (callback) => addIntl(() =>
    // $FlowFixMe
    require.ensure([
      'intl/locale-data/jsonp/${locale}.js',
      'react-intl/locale-data/${locale}',
      '../../messages/${locale}.js',
    ], (require) => {
      require('intl/locale-data/jsonp/${locale}.js');
      addLocale(
        require('react-intl/locale-data/${locale}'),
        require('../../messages/${locale}.js').default,
      callback);
    }, 'intl-${locale}')),
`;

export const genIntlLoader = (defaultLocale, locales) => `// @flow

/**
 * This is an autogenerated file, do not edit directly
 * to add additional locales run "gulp messages"
 **/

import { addLocaleData } from 'react-intl';

const addLocale = (locale, messages, callback) => {
  addLocaleData(locale);
  callback(messages);
};

const addIntl = (callback) => {
  // $FlowFixMe
  require.ensure(['intl'], (require) => {
    if (!window.addIntl) {
      require('intl');
    }
    callback();
  }, 'intl');
};

const localeData = {
  // $FlowFixMe
  ${defaultLocale}: (callback) => require.ensure([
    'react-intl/locale-data/${defaultLocale}',
  ], (require) =>
    addLocale(require('react-intl/locale-data/${defaultLocale}'), {}, callback),
  '${defaultLocale}'),

  // $FlowFixMe
  ${defaultLocale}_polyfill: (callback) => addIntl(() => require.ensure([
    'intl/locale-data/jsonp/${defaultLocale}.js',
    'react-intl/locale-data/${defaultLocale}',
  ], (require) => {
    require('intl/locale-data/jsonp/${defaultLocale}.js');
    addLocale(require('react-intl/locale-data/${defaultLocale}'), {}, callback);
  }, 'intl-en')),
${locales.map(genLocaleBlock).join('')}
};

export const loadLocale = (locale: string) => new Promise((resolve) => {
  if (!localeData[locale]) {
    locale = 'en';
  }

  if (!window.Intl || window.IntlPolyfill) {
    locale += '_polyfill';
  }

  return localeData[locale](resolve);
});
`;
